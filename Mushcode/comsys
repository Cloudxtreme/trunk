@@ This is version 1.0.9c alpha of the AshCom II Comsystem.
@@
@@ Create Main ComSystem
@@
@@ You need -DHACK_ATTR, -DTINY_U, -DSIDEEFFECTS all defined for this to work at compiletime!
@@
@set/quiet me=!halt
think Running pre-check of system....
think Test 1: [ifelse(eq(bittype(%#),6),Passed.,You're not an IMMORTAL.  You need an immortal to run the uploader and pre-tester.[setq(0,1)])]%rTest 2: [switch([gt(match(version(),*RhostMUSH*),0)][gt(strip(grab(version(),3.*),.),323)][gt(after(version(),patchlevel),13)],0*,Version is not RhostMUSH.  Very likely will not work.[setq(0,1)],?0?,Version is prior to 3.2.4.  It will not work.[setq(0,1)],?10,[ifelse(gt(strip(grab(version(),3.*),.),324),Passed.,Version is prior to 3.2.4 pl14.  It will not work.[setq(0,1)])],Passed.)]%rTest 3: [ifelse(eq(mask(config(sideeffects),11),11),Passed.,You do not have the right sideeffects enabled.  You need the following: set%(%) create%(%) pemit%(%)[setq(0,1)])]%rTest 4: [ifelse(config(sidefx_returnval),Passed.,You need 'sidefx_returnval' set to '1'.[setq(0,1)])]%rTest 5: [ifelse([strmatch(cname(me),*NOT FOUND*)],cname%(%) is undefined.  Please define this function.[setq(1,1)] - This is a warning only for this version,Passed.)]%rResults: [ifelse(r(0),Tests have failed.  You need to fix the above for the comsystem to work.,Tests succeeded.  [ifelse(r(1),%(1 Warning%))] You should now be able to load in the comsystem.)]
think %r[space(9)]---> If these tests failed, you are given [ansi(hrf,10 seconds)] to abort this script...
@@
@@
@@
@@
@@
@@
@@
@@
@@
@@
think Continuing with loading of script...
@@
@create ChanSys=10
&CMD_ADDCOM ChanSys=$addcom *=*:@pemit %#=[u(ADDCOMMSG[setr(0,u(addcomf,setr(1,first(lcstr(secure(%0)))),setr(2,lcstr(secure(%1)))))],r(1),r(2))];@break [not(match(11,r(0)))];&_CH_ALIST %#=[setunion(get(%#/_ch_alist),[r(1)]:[r(2)])];&CHLIST_[r(2)] [v(STOR-DB)]=[null(ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),%#),,u([v(FX-DB)]/do_alias,xxx,:has joined this channel.,xxx:[r(2)])))][setunion(get([v(STOR-DB)]/chlist_[secure(%1)]),%#)]
&CMD_GENERIC_HACK ChanSys=$=*:@break [not(hasattr(%#/COMHACK))];@set me/cmd_generic_hack=!no_command;@pemit %#=[u(genericf,public,%0)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(eq(words(%0),1),match(on off who,first(%0))),match(last,first(%0))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%0,0,1)))],public,pedit(%0,%%,\\\%,\\\%c,%c,\\\%C,%C),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[r(5)]
@set ChanSys/CMD_GENERIC_HACK = no_parse
@set ChanSys/CMD_GENERIC_HACK = singlethread
&CMD_GENERIC ChanSys=$=* *:@break [hasattr(%#/COMHACK)];@set me/cmd_generic=!no_command;@pemit %#=[u(genericf,%0,%1)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(match(on off who,first(%1)),eq(words(%1),1)),match(last,first(%1))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%1,0,1)))],%0,pedit(%1,%%,\\\%,\\\%c,%c,\\\%C,%C),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[r(5)]
@set ChanSys/CMD_GENERIC = no_parse
@set ChanSys/CMD_GENERIC = singlethread
&CMD_DELCOM ChanSys=$delcom *:@pemit %#=[u(DELCOMMSG[setr(0,u(delcomf,setr(1,first(lcstr(secure(%0))))))],r(1))];@break [not(r(0))];&_CH_ALIST %#=[setdiff(get(%#/_ch_alist),grab(get(%#/_ch_alist),[r(1)]:*))]
@Aconnect ChanSys=@swi [totcmds(%#)]=<10,{&_CH_ALIST %#=[setunion(get(%#/_CH_ALIST),n:newbie)];@toggle %#=forcehalted;@wait 0={@fo %#=@fo %#=n on;@wait 1=@toggle %#=!forcehalted};@pemit %#=ComSys: Welcome new player. Your alias for 'Newbie' is 'n'.};@swi/f [!hasflag(%#,dark)]=1,@eval [u([v(FX-DB)]/FN_COMNOTIFYBROADCAST,%#,[ifelse(match(%0,1),has reconnected.,has connected.)])]
&CMD_CLIST ChanSys=$@clist*:@pemit %#=[u(CLIST[match(/headers /full /aliases /notify /borders,%0*)])]
&CMD_COMLIST ChanSys=$comlist*:@pemit %#=[ljust(Alias,10)][ljust(Channel,32)][ljust(Status,8)]Title[iter(munge(do_sort,u(order_by,%#),get(%#/_ch_alist)),%r[ljust(before(##,:),10)][s(default([v(F-DB)]/do_chancolor_[after(##,:)],[after(##,:)]))][space(sub(32,strlen(trim(after(##,:)))))][ljust(ifelse(match(get(%#/_ch_lock),after(##,:)),LCK,ifelse(match(get([v(STOR-DB)]/chlist_[after(##,:)]),%#),on,OFF)),8)][get_eval(%#/_ch_alias_[after(##,:)])])]%r---- End of comlist ----
&CMD_COMTITLE ChanSys=$comtitle *=*:@pemit %#=[u(COMTITLEMSG[setr(0,u(comtitlef,%0,%1))],%0,%1)];@break [not(match(01 11,r(0)))];&_CH_ALIAS_[secure(r(3))] %#=%1
@set ChanSys/CMD_COMTITLE = no_parse
&CMD_GENERIC_NOPARSE ChanSys=$.* *:@set me/CMD_GENERIC_NOPARSE=!no_command;@pemit %#=[u(genericf,%0,%1)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit/list [ifelse(or(and(match(on off who,first(%1)),eq(1,words(%1))),match(last,first(%1))),%#,r(8))][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),mid(%1,0,1)))],%0,escape(%1),%#)])][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]=[r(5)]
@set ChanSys/CMD_GENERIC_NOPARSE = no_parse
@set ChanSys/CMD_GENERIC_NOPARSE = singlethread
&CMD_COMCFG ChanSys=$comcfg*:@pemit %#=[u(COMCFGMSG[setr(0,gte(bittype(%#),6))],setr(1,u(comcfgf,%0,%#)),%0)];@break [not(and(r(0),r(1)))];@eval [u(comcfgdo[r(1)],%0)]
@set ChanSys/CMD_COMCFG = no_parse
&CMD_COMHELP ChanSys=$comhelp*:@pemit %#=ComSys: Help for Version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%]%r[repeat(-,78)];@pemit %#=[u([v(F-DB)]/FN_COMHELP[!!$v(0)],trim(%0))]
&CANUSE ChanSys=[or(gte(bittype(%#),6),hastype(%#,player))]
@lock/UseLock ChanSys=CANUSE/1
@Ufail ChanSys=ComSys: I'm sorry, but you can not use the comsystem.
&CMD_CEMIT ChanSys=$@cemit *=*:@pemit %#=[u(F_CHK_CEMIT,%0,%1)];@break [not(match(111,r(2)))];@pemit/list [r(8)][u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(F_DO_CEMIT,%0,%1,%#)])][ulocal([v(FX-DB)]/do_hist1,secs())]=[r(5)]
&CMD_CBOOT ChanSys=$@cboot *=*:@pemit %#=[u(CBOOTMSG[setr(0,u(cbootf,%0,%1,%#))],%0,%1,%#)];@break [not(match(11,r(0)))];@eval [u(docboot,%0,%1,%#)]
&CMD_COMOPTIONS ChanSys=$comoptions:@pemit %#=ComSys: Options used to communicate on Version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%];@pemit %#=ComSys: Help Completed.[list(lnum(1,words(get([v(F-DB)]/comoptions_syntax),|)),[space(5)][ljust([extract(get([v(F-DB)]/comoptions_syntax),##,1,|)]%b,35,.)] [extract(get([v(F-DB)]/comoptions_reference),##,1,|)])]
&CMD_PENNOPTIONS ChanSys=$pennoptions:@pemit %#=ComSys: PennMUSH compatability for Version [ansi(hb,first(v(version)))] of AshComV2 %[[ansi(hc,rest(v(version)))]%];@pemit %#=ComSys: Help Completed.[list(lnum(1,words(get([v(F-DB)]/pennoptions_syntax),|)),[space(5)][ljust([extract(get([v(F-DB)]/pennoptions_syntax),##,1,|)]%b,35,.)] [extract(get([v(F-DB)]/pennoptions_reference),##,1,|)])]
&CMD_CHAN_LIST ChanSys=$@chan*/list*:@pemit %#=[u(CLIST2)]
&CMD_CHAN_WHAT ChanSys=$@chan*/what*:@pemit %#=[u(CLIST1)]
&CMD_CHAN_ON ChanSys=$@chan*/on *:@pemit %#=[u(CHANONMSG[setr(0,u(chanonf,or(match(pos(=,%1),#-1),and(pos(=,%1),controls(%#,pmatch(after(%1,=))))),gt(match(get([v(STOR-DB)]/ch_list),before(%1,=)),0),setr(2,before(%1,=)),after(%1,=)))],%1)];@break [or(r(4),not(match(11,r(0))))];&CHLIST_[r(2)] [v(STOR-DB)]=[setq(1,r(2))][setq(3,default([v(F-DB)]/ch_template1_%q2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q2,get([v(F-DB)]/ch_template2)))][null(u([v(FX-DB)]/do_genpemit,[setunion(%#,u([v(FX-DB)]/do_gagging,r(2)))],u(genericdo1,XXX,:has joined this channel.,r(5))))][setunion(u([v(FX-DB)]/do_gagging,r(2)),r(5))];&_CH_ALIST %#=[setunion(get(%#/_ch_alist),[lcstr([r(2)]:[r(2)])])]
@set ChanSys/cmd_chan_on=no_parse
&CMD_CHAN_OFF ChanSys=$@chan*/off *:@pemit %#=[u(CHANOFFMSG[setr(0,u(chanofff,or(match(pos(=,%1),#-1),and(pos(=,%1),controls(%#,pmatch(after(%1,=))))),gt(match(get([v(STOR-DB)]/ch_list),before(%1,=)),0),setr(2,before(%1,=)),after(%1,=)))],%1)];@break [or(r(4),not(match(11,r(0))))];&CHLIST_[r(2)] [v(STOR-DB)]=[setq(1,r(2))][setq(3,default([v(F-DB)]/ch_template1_%q2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q2,get([v(F-DB)]/ch_template2)))][null(u([v(FX-DB)]/do_genpemit,u([v(FX-DB)]/do_gagging,r(2)),u(genericdo1,XXX,:has left this channel.,r(5))))][setdiff(u([v(FX-DB)]/do_gagging,r(2)),r(5))];&_CH_ALIST %#=[setdiff(get(%#/_ch_alist),[lcstr([r(2)]:[r(2)])])]
@set ChanSys/cmd_chan_off=no_parse
&CMD_CHAN_WHO ChanSys=$@chan*/who *:@pemit %#=[u(genericf,%1,who)];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit %#[u([v(FX-DB)]/do_chcnt,r(1))][setq(5,[setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][u(GENERICDO[setr(6,member(v(generic_cmds),w))],%1,who,%#)])]=[r(5)]
@set ChanSys/cmd_chan_who=no_parse
&CMD_CHAN_TITLE ChanSys=$@chan*/title *=*:@pemit %#=[u(COMTITLEMSG[setr(0,u(comtitlef,%1,%2))],%1,%2)];@break [not(match(01 11,r(0)))];&_CH_ALIAS_[secure(r(3))] %#=%2
&CMD_CHAN_RECALL ChanSys=$@chan*/recall *:@pemit %#=[u(genericf,trim(before(%1,=)),squish(trim(last [after(%1,=)])))];@break [or(not(match(11,r(2))),not(match(r(8),%#)))];@pemit %#=[u(genericdo7,trim(before(%1,=)),squish(trim(last [secure(after(%1,=))])),%#)]
&CMD_COMMASK ChanSys=$commask *=*:@pemit %#=[u(COMMASKMSG[setr(0,u(commaskf,secure(%0),secure(%1),%#))],secure(%0),secure(%1))];@break [not(match(r(0),10))];&_CH_MASK_[first(secure(%0))] %#=[secure(%1)]
&CMD_COMPREFIX ChanSys=$comprefix*:@pemit %#=[u(COMPREFIXM[setr(0,u(comprefixf,trim(%0)))],trim(%0))];@break [!match(11,%q0)];&_COM_PREFIX %#=[trim(remove(lcstr(%0),/clear))]
&CMD_COMALL ChanSys=$comall:@pemit %#=[ifelse(gte(bittype(%#),5),u(do_comall),ComSys: Permission Denied.)]
&CMD_COMGAG ChanSys=$comgag*:@pemit %#=[u(FN_COMGAG[match(/on /off /list,first(%0))],rest(%0))]
&CMD_COMNOTIFY ChanSys=$comnotify*:@pemit %#=[u(FN_COMNOTIFY[match(/enable /disable /list /on /off,first(%0))],rest(%0))]
@Adisconnect ChanSys=@swi/f [!hasflag(%#,dark)]=1,@eval [u([v(FX-DB)]/FN_COMNOTIFYBROADCAST,%#,has disconnected.)]
@set ChanSys/cmd_comprefix=no_parse
@set ChanSys/CMD_CHAN_TITLE=no_parse
@set ChanSys=INHERIT
@set ChanSys=SHOWFAILCMD
@@
@@ Create Channel DB
@@
@create ChannelDB=10
@set ChannelDB=INHERIT
@set ChannelDB=HALTED
@set ChannelDB=SAFE
@@
@@ Create Global Error Object
@@
@create GlobalErrObject=10
@VA GlobalErrObject=[localize(u(VA_%vd,%0))]
&VA_0 GlobalErrObject=[ifelse(!!member(+ [get(%#/_COM_PREFIX)],mid(%0,0,1)),u(vc,pedit(delete(%0,0,1),%%,\\\%,\\\%c,%c,\\\%C,%C)),u(vb,pedit(%0,%%,\\\%,\\\%c,%c,\\\%C,%C)))]
&VA_1 GlobalErrObject=[ifelse(!!member(+ [get(%#/_COM_PREFIX)],mid(%0,0,1)),u(vf,escapex(delete(%0,0,1),;)),u(ve,escapex(%0,;)))]
@VB GlobalErrObject=[switch([gt(words(rest(%0)),0)][and(match(get(%#/_CH_ALIST),[first(edit(edit(%0,?,\\\\\\?),*,\\\\\\*))]:*),not(match(get(%#/_ch_lock),after(grab(get(%#/_ch_alist),[first(%0)]:*),:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),grab(get(%#/_ch_alist),[first(%0)]:*)),u(fn_error,%0))]
@VC GlobalErrObject=[switch([gt(words(rest(%0)),0)][setq(t,grab(get(%#/_ch_alist),[first(%0)]:*))][ifelse(!$r(t),setq(t,*:[grab(get([v(STOR-DB)]/ch_list),[first(%0)]*)]))][and(match(get(%#/_ch_alist),%qt),not(match(get(%#/_ch_lock),after(%qt,:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),xxx:[after(%qt,:)]),u(fn_error,%0))]
@VD GlobalErrObject=0
@VE GlobalErrObject=[switch([gt(words(rest(%0)),0)][and(match(edit(get(%#/_CH_ALIST),*,#),[first(pedit(%0,?,#,*,#))]:*),not(match(get(%#/_ch_lock),after(grab(edit(get(%#/_ch_alist),*,#),[first(pedit(%0,?,#,*,#))]:*),:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(edit(%0,*,#)),rest(%0),grab(edit(get(%#/_ch_alist),*,#),[first(pedit(%0,?,#,*,#))]:*)),u(fn_error,%0))]
@VF GlobalErrObject=[switch([gt(words(rest(%0)),0)][setq(t,grab(get(%#/_ch_alist),[first(%0)]:*))][ifelse(!$r(t),setq(t,*:[grab(get([v(STOR-DB)]/ch_list),[first(%0)]*)]))][and(match(get(%#/_ch_alist),%qt),not(match(get(%#/_ch_lock),after(%qt,:))))],01,No message.,11,u([v(FX-DB)]/do_chkalias,first(%0),rest(%0),xxx:[after(%qt,:)]),u(fn_error,%0))]
&FN_ERROR_ALTERNATE GlobalErrObject=[setq(w,textfile(help,*%0*,2))][ifelse(or(hasattr(%#,NOERROR),strmatch(%qw,*here are no entries*)),error(%#),[error(%#)]%rHowever%, you may try one of:%r[trim(after(%qw,:),b,%r)])]
&FN_ERROR GlobalErrObject=[error(%#)]
@set GlobalErrObject=INHERIT
@set GlobalErrObject=SAFE
@set GlobalErrObject=SIDEFX
@@
@@ Create Main Functionary
@@
@create ChanFunc=10
@parent ChanSys=ChanFunc
&STRIP_ALL ChanFunc=[ifelse(strmatch(stripaccents(),*NOT FOUND),stripansi(%0),stripansi(stripaccents(%0)))]
&FUN_CNAME ChanFunc=[u(fun_captiontitle,%0)][switch([strmatch(name(%0),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),name(%0)),name(%0))][u(fun_caption,%0)]
&FUN_CAPTION ChanFunc=[ifelse(hasattr(%0,caption),%b[get(%0/caption)])]
&FUN_CAPTIONTITLE ChanFunc=[ifelse(hasattr(%0,titlecaption),[get(%0/titlecaption)]%b)]
&FUN_CNAME2 ChanFunc=[switch([strmatch(name(%0),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),name(%0)),name(%0))]
&FUN_MASKCNAME ChanFunc=[switch([strmatch(get(%0/_ch_mask_%1),u(strip_all,get(%0/ansiname)))][hastoggle(%0,extansi)][hasattr(%0,ansiname)],111,[get(%0/ansiname)][ansi(n,)],001,ansi(get(%0/ansiname),get(%0/_ch_mask_%1)),get(%0/_ch_mask_%1))]
&COMPREFIXF ChanFunc=[!!words(%0)][or(!!strfunc(and,1 [iter(%0,eq(strlen(itext(0)),1))]),match(%0,/clear))]
&COMPREFIXM00 ChanFunc=ComSys: [words(get(%#/_COM_PREFIX))] prefixes defined[ifelse(words(get(%#/_COM_PREFIX)),:%b%b [get(%#/_com_prefix)])]
&COMPREFIXM10 ChanFunc=ComSys: Each comsystem prefix must be one character.
&COMPREFIXM11 ChanFunc=ComSys: [ifelse(match(%0,/clear),comsystem prefixes cleared,[words(%0)] comsystem prefixes set)].
&COMMASKF ChanFunc=[gt(match(get([v(STOR-DB)]/commask_chanlist),%0),0)][and(words(%1),or(words(search(eplayer=strmatch\(get\(##/_ch_mask_%0\)\,%1\))),hastype(*%1,player)))]
&COMMASKMSG11 ChanFunc=ComSys: Either that alias mask already exists or it matches a player name.
&COMMASKMSG10 ChanFunc=ComSys: [ifelse(words(%1),Mask alias of '%1' set for channel '%0'.,Mask alias for channel '%0' cleared.)]
&COMMASKMSG01 ChanFunc=[u(commaskmsg00)]
&COMMASKMSG00 ChanFunc=ComSys: Sorry, you are not allowed to 'mask' names on that channel.
&CHANONF ChanFunc=[setq(5,ifelse(isdbref(pmatch(%3)),pmatch(%3),%#))][isdbref(r(5))][ifelse(and(or(gte(bittype(r(5)),5),uldefault([v(F-DB)]/[r(2)]_lock,1,r(5))),match(get([v(STOR-DB)]/ch_list),r(2))),1,0)][ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),r(5)),setq(4,1),setq(4,0))]
&CHANONMSG00 ChanFunc=ComSys: Invalid channel specified. Use @clist for a list of channels.
&CHANONMSG10 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANONMSG01 ChanFunc=ComSys: Invalid player specified.
&CHANONMSG11 ChanFunc=[ifelse(r(4),ComSys: [ifelse(match(r(5),%#),You are,[name(r(5))] is)] already on that channel.)]
&CHANOFFF ChanFunc=[setq(5,ifelse(isdbref(pmatch(%3)),pmatch(%3),%#))]%0%1[ifelse(match(get([v(STOR-DB)]/chlist_[r(2)]),r(5)),setq(4,0),setq(4,1))]
&CHANOFFMSG00 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANOFFMSG10 ChanFunc=[u(CHANONMSG00,%0,%1)]
&CHANOFFMSG01 ChanFunc=[u(CHANONMSG01,%0,%1)]
&CHANOFFMSG11 ChanFunc=[ifelse(r(4),ComSys: [ifelse(match(r(5),%#),You are,[name(r(5))] is)] already off that channel.)]
&ADDCOMF ChanFunc=[and(gt(words(%0),0),not(match(get(%#/_ch_alist),%0:*)))][and(match(get([V(STOR-DB)]/ch_list),%1),or(gte(bittype(%#),5),uldefault([v(F-DB)]/%1_lock,1,%#)),not(match(get(%#/_ch_lock),%1)))]
&ADDCOMMSG00 ChanFunc=ComSys: Invalid channel specified. Use @clist for a list of channels.
&ADDCOMMSG10 ChanFunc=[u(addcommsg00,%0,%1)]
&ADDCOMMSG01 ChanFunc=ComSys: [ifelse(words(%0),That alias already exists. Delete it first.,Invalid alias specified. Alias must be 1 or more printable characters.)]
&GENERICF ChanFunc=[setq(1,grab(get([v(STOR-DB)]/ch_list),%0*))][setq(1,ifelse(or(words(r(1)),words(%0)),r(1),public))][switch([setr(2,[gt(words(r(1)),0)][and(uldefault([r(1)]_lock,1,%#),not(match(get(%#/_ch_lock),r(1))))])][or(strmatch(on,%1),gt(match(setr(8,setinter(lwho(),u([v(FX-DB)]/do_gagging,r(1)))),%#),0))][and(strmatch(on,%1),not(match(get([v(STOR-DB)]/CHLIST_[r(1)]),%#)))][and(strmatch(on,%1),match(get([v(STOR-DB)]/CHLIST_[r(1)]),%#))],0*,ComSys: Sorry\, that channel does not exist.,?0*,ComSys: Sorry\, You have no access to that channel.,*00?,ComSys: Sorry\, you are not on that channel.,*11?,[setq(8,setunion(r(8),%#))],*?01,ComSys: You are already on that channel[setq(2,10)])]
&FORMAT_CHAN ChanFunc=%q3[u(DO_CHANCOLOR,r(1))]%q4[ifelse(hasattr(%0/_CH_ALIAS_[r(1)]),[setq(7,localize([setq(9,get(%0/_ch_alias_[r(1)]))][objeval(%0,[s(r(9))]%b)]))],setq(7,))]
&GENERICDO0 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))] [default(%2/saystring,says%,)] "[objeval(%2,ifelse(hasattr(%2,CH_ANSI),ansi(get(%2/ch_ansi),s(%1)),s(%1)))]")]
&GENERICDO1 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))] [objeval(%2,ifelse(hasattr(%2,CH_ANSI),ansi(get(%2/ch_ansi),s(after(%1,:))),s(after(%1,:))))])]
&GENERIC_CMDS ChanFunc=: ; " o w ` l
&GENERICDO2 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))][ifelse(match(;,trim(mid(%1,0,2))),%b,)][objeval(%2,ifelse(hasattr(%2,CH_ANSI),ansi(get(%2/ch_ansi),s(after(%1,;))),s(after(%1,;))))])]
&GENERICDO3 ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))] [default(%2/saystring,says%,)] [objeval(%2,ifelse(hasattr(%2,CH_ANSI),"[ansi(get(%2/ch_ansi),s(delete(%1,0,1)))],s(%1)))]")]
&DO_CHANCOLOR ChanFunc=[u(do_chancolorsub,%0)]
&DO_CHANCOLORSUB ChanFunc=[ifelse(hasattr([v(F-DB)],do_chancolor_over_%0),u(do_chancolor_over_%0,%0),u(do_chancolor_%0,%0))]
&CH_TEMPLATE1 ChanFunc=[
&CH_TEMPLATE2 ChanFunc=]
&ADDCOMMSG11 ChanFunc=ComSys: Alias of '[secure(%0)]' set for channel '[capstr(lcstr(%1))]'.
&GENERICDO4 ChanFunc=[ifelse(member(on off,lcstr(%1)),[ifelse(match(%1,on),ulocal([v(FX-DB)]/do_joinchan,%#,1,r(1)))][ifelse(and(gte(bittype(%#),5),hasflag(%#,dark)),[u(format_chan,r(1))] You have STEALTH [ifelse(match(%1,on),joined,left)] this channel.,ulocal([v(FX-DB)]/do_alias,xxx,:has [ifelse(match(%1,on),joined,left)] this channel.,xxx:[r(1)]))][ifelse(match(%1,off),ulocal([v(FX-DB)]/do_joinchan,%#,0,r(1)))],[u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3)])]
&GENERICDO5 ChanFunc=[ifelse(match(who,%1),u(dowho,%2),u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3))]
&DELCOMF ChanFunc=[gt(match(get(%#/_ch_alist),%0:*),0)]
&DELCOMMSG0 ChanFunc=ComSys: You do not have an alias by the name of '%0'.
&DELCOMMSG1 ChanFunc=ComSys: Alias '%0' has been deleted.
&DOWHO ChanFunc=[printf($^78:-:s,- channel [u(DO_CHANCOLOR_[r(1)])] listing -)]%r*** players ***[iter(setinter(objeval(%#,lwho()),get([v(STOR-DB)]/chlist_[r(1)])),%r[space(5)][ljust([ifelse(setr(9,hasattr(##,_ch_mask_[r(1)])),get(##/_ch_mask_[r(1)]),cname(##))][ifelse(objeval(%#,visible(##)),%(##[objeval(%#,flags(##))]%) [ifelse(r(9),%{[cname(##)]%})])],50)][ljust(ifelse(match(get(##/_ch_gagged),r(1)),%[gagged%],%b),10)][ifelse(gt(idle(##),120),Idle [switch(setr(w,singletime(idle(##))),*m*,ansi(hg,%qw),*h*,ansi(hy,%qw),ansi(hr,%qw))])])]%r*** objects ***[setq(0,iter(keeptype(get([v(STOR-DB)]/chlist_[r(1)]),thing),ifelse(or(not(hasflag(##,dark)),controls(%#,##)),##)))][iter(r(0),%r[cname(##)][ifelse(controls(%#,##),%(##[flags(##)]%) <Owned by: [name(owner(##))]%(##%)>)])][ifelse(words(r(0)),,%r%(None Found%))]%r[repeat(-,78)]
&DOWHO ChanFunc=[s(edit(center(- channel [r(1)] listing -,78,-),r(1),v(DO_CHANCOLOR_[r(1)])))]%r*** players ***[iter(setinter(objeval(%#,lwho()),get([v(STOR-DB)]/chlist_[r(1)])),%r[space(5)][ljust([ifelse(setr(9,hasattr(##,_ch_mask_[r(1)])),get(##/_ch_mask_[r(1)]),cname(##))][ifelse(objeval(%#,visible(##)),%(##[objeval(%#,flags(##))]%) [ifelse(r(9),%{[cname(##)]%})])],50)][ljust(ifelse(match(get(##/_ch_gagged),r(1)),%[gagged%],%b),10)][ifelse(gt(idle(##),120),Idle [switch(setr(w,singletime(idle(##))),*m*,ansi(hg,%qw),*h*,ansi(hy,%qw),ansi(hr,%qw))])])]%r*** objects ***[setq(0,iter(keeptype(get([v(STOR-DB)]/chlist_[r(1)]),thing),ifelse(or(not(hasflag(##,dark)),controls(%#,##)),##)))][iter(r(0),%r[cname(##)][ifelse(controls(%#,##),%(##[flags(##)]%) <Owned by: [name(owner(##))]%(##%)>)])][ifelse(words(r(0)),,%r%(None Found%))]%r[repeat(-,78)]
&CLIST0 ChanFunc=ComSys: Unrecognized switch for @clist.
&CLIST1 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Description)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][wrap(get([V(STOR-DB)]/chdesc_##),45,l,,,32)]))]---- End of list of channels ----
&CLIST2 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,44)][ljust(--Flags--,11)][space(3)][rjust(Users,7)][rjust(Messages,11)])][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#),gte(bittype(%#),5)),printf([space(4)]$-44s$-11s$-3s$7s$11s,u(do_chancolor_##,##),ifelse(match(get([v(STOR-DB)]/commask_chanlist),##),M),ifelse(match(get(%#/_ch_lock),##),%bL%b),words(get([v(STOR-DB)]/chlist_##)),add(0,get([v(STOR-DB)]/chused_##)))))]---- End of list of channels ----
&CLIST3 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Channel Alias ReName)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][ifelse(hasattr([v(F-DB)],do_chancolor_over_##),u(do_chancolor_over_##,##),u(do_chancolor_##,##))]))]---- End of list of channels ----
&CLIST4 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,*** [ljust(Channel,25)][space(3)]Notify[space(4)]Broadcast)][list(get([v(STOR-DB)]/ch_list),ifelse(or(uldefault([v(F-DB)]/##_lock,1,%#),gte(bittype(%#),5)),[space(4)][u(do_chancolor_##)][space(sub(25,strlen(##)))][ifelse(match(get(%#/_ch_lock),##),%bL%b,%b%b%b)][ljust(switch([or(match(get([v(F-DB)]/notify_list),0),and(hasattr([v(F-DB)]/notify_list),!match(get([v(F-DB)]/notify_list),##)))][or(match(get(%#/_ch_notify),##),match(get(%#/_ch_notify),+all))],1?,[ansi(c,IGNORED)],?1,[ansi(hr,DISABLED)],[ansi(hg,enabled)]),10)][switch([or(match(get(%#/_ch_unnotify),##),match(get(%#/_ch_unnotify),+all))][or(match(get([v(F-DB)]/notify_list),0),and(hasattr([v(F-DB)]/notify_list),!match(get([v(F-DB)]/notify_list),##)))],?1,[ansi(c,IGNORED)],1?,[ansi(hr,DISABLED)],[ansi(hg,enabled)])]))]---- End of list of channels ----
&CLIST5 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,[printf($-15:.:s $-25:.:s $-15:.:s,Left-Border,Channel-Name,Right-Border)][iter(get([v(STOR-DB)]/ch_list),%r[printf($-15s $-25s $-15s,default([v(F-DB)]/ch_template1_%i0,get([v(F-DB)]/ch_template1)),u(do_chancolor_%i0),default([v(F-DB)]/ch_template2_%i0,get([v(F-DB)]/ch_template2)))])]%r---- End of list of channels ----)]
&FN_COMGAG0 ChanFunc=Comsys: COMGAG -- Invalid switch specified. Use /on, /off, or /list.
&FN_COMGAG1 ChanFunc=[ifelse(or(!$u([v(F-DB)]/do_chancolor,%0),match(get(%#/_ch_gagged),%0)),ComSys: COMGAG -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already in your gagged list,Channel %0 is not a valid channel)],[u([v(FX-DB)]/fn_gagset,%#,add,%0)]ComSys: COMGAG -- [u([v(F-DB)]/do_chancolor,%0)] added to your gag list.)]
&FN_COMGAG2 ChanFunc=[ifelse(match(get(%#/_ch_gagged),%0),[u([v(FX-DB)]/fn_gagset,%#,remove,%0)]ComSys: COMGAG -- [u([v(F-DB)]/do_chancolor,%0)] removed from your gag list.,ComSys: COMGAG -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 not in your gagged list,Channel %0 is not a valid channel)])]
&FN_COMGAG3 ChanFunc=ComSys: Channels currently gagged:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_gagged),elist(get(%#/_ch_gagged),,,,,u([v(F-DB)]/do_chancolor,%0)),No Channels set as gagged found)]%r[repeat(-,78)]
&FN_COMNOTIFY0 ChanFunc=ComSys: COMNOTIFY -- Invalid switch specified. Use /enable, /disable, or /list.
&FN_COMNOTIFY1 ChanFunc=[ifelse(or(!$u([v(F-DB)]/do_chancolor,%0),!match(get(%#/_ch_notify),%0)),ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already enabled for connect/disconnect notification,[ifelse(match(%0,+all),ALL channels [ifelse(!hasattr(%#,_ch_notify),are already enabled,enabled)] for connect/disconnect notification[u([v(FX-DB)]/fn_notifyset,%#,clear,%0)],Channel %0 is not a valid channel)])],[u([v(FX-DB)]/fn_notifyset,%#,add,%0)]ComSys: COMNOTIFY -- [u([v(F-DB)]/do_chancolor,%0)] enabled for connect/disconnect notification)]
&FN_COMNOTIFY2 ChanFunc=[ifelse(or(match(get(%#/_ch_notify),+all),match(get(%#/_ch_notify),%0)),ComSys: COMNOTIFY -- [ifelse(match(%0,+all),ALL channels,u([v(F-DB)]/do_chancolor,%0))] already disabled for connect/disconnect notification,ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 disabled for connect/disconnect notification[u([v(FX-DB)]/fn_notifyset,%#,remove,%0)],[ifelse(match(%0,+all),ALL channels disabled from connect/disconnect messages[u([v(FX-DB)]/fn_notifyset,%#,all,%0)],Channel %0 is not a valid channel)])])]
&FN_COMNOTIFY3 ChanFunc=ComSys: Channels currently disabled from connect/disconnect notification:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_notify),elist(get(%#/_ch_notify),,,,,ifelse(match(%0,+all),ALL CHANNELS DISABLED,u([v(F-DB)]/do_chancolor,%0))),No Channels disabled from connect/disconnect messages)]%r[repeat(-,78)]%rComSys: Channels currently disabled from connect/disconnect broadcasting:%r[repeat(-,78)]%r[ifelse(hasattr(%#,_ch_unnotify),elist(get(%#/_ch_unnotify),,,,,ifelse(match(%0,+all),ALL CHANNELS DISABLED,u([v(F-DB)]/do_chancolor,%0))),No Channels disabled from connect/disconnect broadcasting)]%r[repeat(-,78)]
&FN_COMNOTIFY4 ChanFunc=[ifelse(or(!$u([v(F-DB)]/do_chancolor,%0),!match(get(%#/_ch_unnotify),%0)),ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 already enabled for connect/disconnect broadcasting,[ifelse(match(%0,+all),ALL channels [ifelse(!hasattr(%#,_ch_unnotify),are already enabled,enabled)] for connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,clear,%0)],Channel %0 is not a valid channel)])],[u([v(FX-DB)]/fn_notifyunset,%#,add,%0)]ComSys: COMNOTIFY -- [u([v(F-DB)]/do_chancolor,%0)] enabled for connect/disconnect broadcasting)]
&FN_COMNOTIFY5 ChanFunc=[ifelse(or(match(get(%#/_ch_unnotify),+all),match(get(%#/_ch_unnotify),%0)),ComSys: COMNOTIFY -- [ifelse(match(%0,+all),ALL channels,u([v(F-DB)]/do_chancolor,%0))] already disabled for connect/disconnect broadcasting,ComSys: COMNOTIFY -- [setq(0,u([v(F-DB)]/do_chancolor,%0))][ifelse(!!$r(0),Channel %q0 disabled for connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,remove,%0)],[ifelse(match(%0,+all),ALL channels disabled from connect/disconnect broadcasting[u([v(FX-DB)]/fn_notifyunset,%#,all,%0)],Channel %0 is not a valid channel)])])]
&FN_COMHELP0 ChanFunc=[repeat(-,78)]%rComSys: Help completed. %[Individual topic help available: comhelp <topic>%]%r[space(8)]Use 'eq' for '=', and 'alias' for '<alias>'[list(lnum(1,words(get([v(F-DB)]/comhelp_syntax),|)),printf([space(2)]$:.:-45s $-30s,extract(get([v(F-DB)]/comhelp_syntax),##,1,|)%b,extract(get([v(F-DB)]/comhelp_reference),##,1,|)))]
&FN_COMHELP11 ChanFunc=[u(FN_COMHELP_%0)]%r[repeat(-,78)]%rComSys: Individual Topic Help completed.
&FN_COMHELP1 ChanFunc=[u(FN_COMHELP1[!!match(v(comhelp_topics),%0)],%0)]
&FN_COMHELP10 ChanFunc=No such topic '%0'.%r[repeat(-,78)]%rComSys: Individual Topic Help completed.
&COMHELP_TOPICS ChanFunc=comhelp addcom eq . alias delcom @clist comlist comtitle comcfg @cemit @cboot commask comprefix comoptions pennoptions comall comgag comnotify
&FN_COMHELP_COMHELP ChanFunc=Syntax: comhelp %[<topic>%]%r%rThe comhelp command shows this screen as well as%rthe main index for the comsystem help.
&FN_COMHELP_ADDCOM ChanFunc=Syntax: addcom <alias>=<channel>%r%rThis will add alias(es) to the channel specified.%rYou may have more than one alias per channel.%r%rNote: This does not automatically add you to the channel.%rYou must specify <alias> on to join the channel and <alias> off to leave.
&FN_COMHELP_EQ ChanFunc=Syntax: =<channel> <message>%r%rThis allows you to talk on the channel as an optional method.%rAll posing and other syntax is available with this option.
&FN_COMHELP_. ChanFunc=Syntax: .<channel> <message>%r%rThis allows you to talk on the channel and not automatically parse%rwhat you say. It's handy for quoting up code.
&FN_COMHELP_DELCOM ChanFunc=Syntax: delcom <alias>%r%rThis will remove the alias from your alias lists.%r%rNote: This does not cause you to leave the channel. To leave the%rchannel, you must use <alias> off.
&FN_COMHELP_@CLIST ChanFunc=Syntax: @clist%[/switch%]%r%rThis allows you to display all available channels to you in varous%rformats for display.%r%r[space(5)]@clist -- default listing%r[space(5)]@clist/full -- full listing with channel output%r[space(5)]@clist/alias -- the channel name alias that shows up when talking on channel%r[space(5)]@clist/notify -- the notification broadcasting settings you have for channels.%r[space(5)]@clist/borders -- Show the left and right borders for each channel.
&FN_COMHELP_COMLIST ChanFunc=Syntax: comlist%r%rThis lists all your aliases and matching channels for those aliases.%r%rIt will display the status of the channel as well%ras any comsystem titles you may have in use for that channel.
&FN_COMHELP_COMTITLE ChanFunc=Syntax: comtitle <channel>=<title>%r%rThis specifies a comtitle you wish to set for use on the comsystem.%r%rComtitles -are- evaluated, but as yourself. Now you know how to get those randomized comtitles in :)
&FN_COMHELP_COMCFG ChanFunc=Syntax: comcfg%[/switch%] %[<option(s)>%]%r%rThis is a wizard command. Help is available with comcfg/help
&FN_COMHELP_@CEMIT ChanFunc=Syntax: @cemit <channel>=<string>%r%rThis will @cemit on the target channel.%r%rYou must either be a wizard or pass the lock to use it.
&FN_COMHELP_@CBOOT ChanFunc=Syntax: @cboot <target>=<channel>%r%rThis is a wizard command to boot the target player/item off the channel.
&FN_COMHELP_COMMASK ChanFunc=Syntax: commask <channel>=<alias>%r%rSet up an alias (masked name) for use on the channel.%r%rThe channel must be configured to allow com masking to use this.
&FN_COMHELP_COMPREFIX ChanFunc=Syntax: comprefix%[/switch] <character(s)>%r%rThis will set up a prefix characgter you can use in addition%rto all the other ones for the comsystem. You may specify '+' and then use +pub%rfor example for talking on channel.%r%rThe /clear switch will remove the prefix character from your settings.
&FN_COMHELP_COMOPTIONS ChanFunc=Syntax: comoptions%r%rThis shows the various special prefix characters that the comsystem will%rhandle. It's pretty self-explainatory.%r%rThe com-to options will still broadcast to everyone, but it formats a 'to user-list' nicely.
&FN_COMHELP_PENNOPTIONS ChanFunc=Syntax: pennoptions%r%rThis shows the basic set of pennmush options the comsystem natively handles.
&FN_COMHELP_COMALL ChanFunc=Syntax: comall%r%rHoly this is a spammy function!%rIt will display all users on all channels that you have access to.
&FN_COMHELP_COMGAG ChanFunc=Syntax: comgag%[/switch%] <channel>%r%rThis will allow you to manipulate the gagging of channel output.%r%r/on -- this turns on gagging on the specified channel%r/off -- this turns off gagging on the specified channel.%r/list -- this lists the channels currently gagged.
&FN_COMHELP_COMNOTIFY ChanFunc=Syntax: comnotify%[/switch%] <channel>%r%rThis will allow you to set up automated connect/disconnect%rmessages when you connect or disconnect from the mush%rto all the channels that you are currently on. As this can become annoying,%rthere are options that you can use to tweak the settings.%r%r/enable %[default%] will enable your broadcasting your own %[dis%]connects.%r/disable will disable your broadcasting your own %[dis%]connects.%r/on %[default%} will allow you to receive broadcasted %[dis%]connects.%r/off will disable your receiving broadcasted %[dis%]connects.%r/list will list all your current notification settings%r%rYou may specify '+all' for /enable /disable /on /off.%r%r@clist/notify will show all channels and all notify settings.
&FN_COMHELP_ALIAS ChanFunc=Syntax: <multiple> See below%r%rThe <alias> option is the primary method you talk on the comsystem%r%rYou define an alias with the addcom option.%r%rOne the alias is defined, you will use the alias as follows.%rFor examples, we'll assume you have an alias 'pub' for public.%r%rpub on -- this will join you to public if you've not joined it.%rpub off -- this will leave the public channel.%rpub who -- this will show who is on public.%rpub last -- will show the last 10 lines of history (if available)%rpub last 30 -- will show the last 30 lines of history (if available)%rpub :waves -- will pose 'waves' on the public channel%rpub ;'s head hurts -- will possessive-pose the message%rpub "heya -- will speak on the channel%rpub heya -- will also speak on the channel%r%rThe comsystem uses the @saystring variable for says. (see 'help @saystring')%r%rTitles and com masks are automatically utilized if configured.%r%rIf you have the channel gagged, you will be notified the channel is gagged.
&FOREACH ChanFunc=[ansi(h[mid(scramble(rgbymc),0,1)],%0)]
&DO_SORT ChanFunc=[sort(%0,,%1)]
&ORDER_BY ChanFunc=[iter(get(%0/_ch_alist),[after(##,:)]:[before(##,:)])]
&COMTITLEF ChanFunc=[gt(words(%1),0)][or(setr(1,gt(match(get([v(STOR-DB)]/ch_list),%0),0)),setr(2,gt(match(get(%#/_ch_alist),%0:*),0)))][setq(3,ifelse(r(1),%0,after(grab(get(%#/_ch_alist),%0:*),:)))]
&COMTITLEMSG00 ChanFunc=ComSys: Invalid channel name specified.
&COMTITLEMSG10 ChanFunc=[u(comtitlemsg00)]
&COMTITLEMSG01 ChanFunc=ComSys: Title has been cleared for channel '[capstr(lcstr(r(3)))]'.
&COMTITLEMSG11 ChanFunc=ComSys: Title set for channel '[capstr(lcstr(r(3)))]'.
&GENERICDO ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[r(7)][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))] [default(%2/saystring,says%,)] "[objeval(%2,s(%1))]")]
&GENERIC_STRIP ChanFunc=457
&GENERICDO6 ChanFunc=[setq(0,1)][ulocal(format_chan,%2)] [setr(6,localize(%[To: [ifelse(gt(numpos(`,%1),1),strfunc(elist,iter(u(chk_players,before(after(secure(%1),`),`)),[u(fun_cname2,##)],,|)@and@|,@),u(fun_cname2,u(chk_players,first(after(secure(%1),`)))))]%]:[localize([setq(6,get(%2/_ch_alias_[r(1)]))][objeval(%2,[s(r(6))]%b)])][ifelse(hasattr(%2/_ch_mask_%q1),u(fun_maskcname,%2,%q1),u(fun_cname,%2))] [setq(5,trim(ifelse(gt(numpos(`,secure(%1)),1),after(after(objeval(%2,%1),`),`),rest(after(objeval(%2,%1),`)))))][v(do_before[setr(4,member(" : ;,mid(r(5),0,1)))])][objeval(%#,s(ifelse(member(; " :,mid(r(5),0,1)),delete(r(5),0,1),r(5))))][v(do_after[r(4)])]))][setq(7,[r(6)])]
&CHK_PLAYERS ChanFunc=[localize([setq(0,iter(%0,ifelse(isdbref(pmatch(##)),pmatch(##))))][ifelse(words(r(0)),r(0),%#)])]
&DO_BEFORE0 ChanFunc=says, "
&DO_AFTER0 ChanFunc="
&DO_BEFORE1 ChanFunc=says, "
&DO_AFTER1 ChanFunc="
&COMCFGSWITCHES ChanFunc=/lock /locklist /chanadd /chandel /chanlist /chancolor /redesc /help /hist /cemitlock /plrlock /plrunlock /plrlist /chanborder /prune /maskadd /maskdel /parsealias
&COMCFGSWITCHES ChanFunc=/lock /locklist /chanadd /chandel /chanlist /chancolor /redesc /help /hist /cemitlock /plrlock /plrunlock /plrlist /chanborder /prune /maskadd /maskdel /parsealias /notify
&COMCFGMSG0 ChanFunc=ComSys: Permission denied.
&COMCFGMSG1 ChanFunc=[u(COMCFGMSG_%0,%1)]
&COMCFGMSG_0 ChanFunc=ComSys: Unrecognized argument '[first(secure(%0))]' to COMCFG.
&COMCFGMSG_1 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(before(%0,=))),pos(=,rest(%0))),ComSys: Lock [ifelse(words(after(%0,=)),set,cleared)] for channel [capstr(lcstr(rest(before(%0,=))))],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),1,1,|)][setq(1,0)])]
&COMCFGSYNTAX ChanFunc=comcfg/lock <valid channel>=[<lock>]|comcfg/locklist <valid channel>|comcfg/chanadd <new channel>=<description>|comcfg/chandel <valid channel>|comcfg/chanlist|concfg/chancolor <valid channel>=[<function>] (works like @extansi)|comcfg/redesc <valid channel>=<new description>|comcfg/help|comcfg/hist <valid channel>=<value>|comcfg/cemitlock <valid channel>=[<lock>]|comcfg/plrlock <target>=<list of channels>|comcfg/plrunlock <target>=<list of channels>|comcfg/plrlist [<optional target>]|comcfg/chanborder <left> <right> [channel]|comcfg/prune <channel:list>[=<object:all>]|comcfg/maskadd <valid channel>|comcfg/maskdel <valid channel>|comcfg/parsealias [<1:0>]|comcfg/notify [+:-][<channel>:list]
&COMCFGF ChanFunc=[match(v(comcfgswitches),first(secure(%0)))]
&COMCFGDO1 ChanFunc=[u([v(FX-DB)]/do_chanlock,rest(before(%0,=)),after(%0,=))]
&COMCFGMSG_2 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(%0)),words(rest(%0))),ComSys: Lock for channel '[capstr(lcstr(setr(9,rest(secure(%0)))))]'%r[space(8)]EvalLock: [ifelse(hasattr([v(F-DB)]/%q9_lock),parenmatch([v(F-DB)]/%q9_lock),<None Defined>)]%r[space(8)]CemitLock: [ifelse(hasattr([v(F-DB)]/%q9_cemit_lock),parenmatch([v(F-DB)]/%q9_cemit_lock),<None Defined>)],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),1,1,|)])][setq(1,0)]
&COMCFGMSG_3 ChanFunc=[ifelse(and(setr(3,not(match(get([V(STOR-DB)]/ch_list),before(rest(%0),=)))),setr(4,words(after(%0,=)))),ComSys: New channel '[secure(capstr(lcstr(before(rest(%0),=))))]' created with desc of '[secure(after(%0,=))]'.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,0*,<Channel already exists>,?0?,<No description given>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),3,1,|)])]
&COMCFGDO3 ChanFunc=[u([v(FX-DB)]/do_chancreate,rest(before(secure(%0),=)),after(secure(%0),=))]
&COMCFGMSG_4 ChanFunc=[ifelse(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' deleted.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([r(3)][gt(pos(=,%0),0)],0*,<Channel does not exists>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),4,1,|)])]
&COMCFGDO4 ChanFunc=[u([v(FX-DB)]/do_chandelete,first(rest(secure(%0))))]
&COMCFGMSG_5 ChanFunc=[ifelse(setr(3,words(rest(%0))),ComSys: Invalid arguments given with [first(secure(%0))] switch. <No arguments required>%r[space(8)]Syntax: [extract(v(comcfgsyntax),5,1,|)],[u([v(FX-DB)]/do_genpemit,%#,ComSys: Administrative listing of channels...%r[space(5)][ljust(Channel Name,25)][ljust(Locked?,8)][ljust(History?,12)][ljust(Masked?,8)][ljust(Users,8)][ljust(Input #,8)])][list(get([V(STOR-DB)]/ch_list),[space(5)][u([v(F-DB)]/do_chancolor_##)][space(sub(25,strlen(##)))][ljust(ifelse(hasattr([v(F-DB)]/##_lock),Yes,No),8)][ljust(ifelse(hasattr([v(F-DB)]/##_history),Yes %([get([get([v(F-DB)]/##_history)]/HVAL)]%),No),12)][ljust(ifelse(match(get([v(STOR-DB)]/commask_chanlist),##),Yes,No),8)][ljust(words(get([V(STOR-DB)]/chlist_##)),8)][ljust(add(0,get([V(STOR-DB)]/chused_##)),8)])]ComSys: Listing completed.)][setq(1,0)]
&COMCFGMSG_6 ChanFunc=[ifelse(setr(3,match(before(rest(%0),=),u(strip_all,objeval(%#,s(after(%0,=)))))),ComSys: Channel '[capstr(lcstr(before(rest(%0),=)))]' colorcodes established.,ComSys: Invalid arguments given with [first(secure(%0))] switch. <Channels must match.>%r[space(8)]Syntax: [extract(v(comcfgsyntax),6,1,|)][setq(1,0)])]
&COMCFGDO6 ChanFunc=[u([v(FX-DB)]/do_chancolor,before(rest(secure(%0)),=),after(%0,=))]
&COMCFGMSG_7 ChanFunc=[ifelse(and(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),setr(4,words(after(%0,=)))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' re-desced with '[secure(after(%0,=))]'.,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,0*,<Channel does not exist>,?0?,<No description given>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),3,1,|)])]
&COMCFGDO7 ChanFunc=[u([v(FX-DB)]/do_chanredesc,rest(before(secure(%0),=)),after(secure(%0),=))]
&COMCFGMSG_8 ChanFunc=[ifelse(words(rest(%0)),ComSys: Invalid arguments given with [first(secure(%0))] switch.%rSyntax: [extract(v(comcfgsyntax),8,1,|)],ComSys: Help for command 'comcfg'[iter(v(comcfgswitches),%r[space(5)][ljust(##%b,12,.)] [extract(v(comcfghelp),#@,1,|)]%r[space(18)]Syntax: [extract(v(comcfgsyntax),#@,1,|)])])]
&COMCFGHELP ChanFunc=Establishes lock for channel.|Lists lock for specified channel.|Create a new channel.|Delete an existing channel.|List special fields of all channels.|Set a colorcode for a channel.|Re-describe a channel.|Show this listing.|Set up history on channel.|Establishes cemitlock for the channel.|Lock channels from player|Restore channels to player|List locked channels (of all/player)|Set left and right channel borders.|Prune players/all from channel. (Optionally list)|Adds channels to 'alias mask' list.|Removes channels from 'alias mask' list.|Enable/Disable parsing with comaliases.
&GENERICDO7 ChanFunc=[ifelse(and(lt(words(%1),3),match(last,first(%1))),ulocal(ifelse(match(rest(%1),*?-?*),dolast_range,dolast),first(%1),rest(strip(%1,@)),%2,member(@,mid(rest(%1),0,1))),u(genericdo[strip(member(v(generic_cmds),mid(%1,0,1)),v(generic_strip))],%0,%1,%2,%3))]
&DOLAST ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,min(sub(get([v([r(1)]_history)]/hval),1),max(min(ifelse(words(%1),%1,10),setr(0,words(setdiff(lattr([v([r(1)]_HISTORY)]/hist_time_*),#-1 NO MATCH)))),min(%1,r(0)),1)))][center(- history listing for [r(1)] <Recalling [r(7)] lines...> -,78,-)])][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(ifelse(not(%3),revwords(u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),sub(get([r(6)]/hval),1),r(7))),u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),sub(get([r(6)]/hval),1),r(7))),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DOLAST_RANGE ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,[max(1,min(words(setdiff(lattr([v([r(1)]_history)]/hist_time_*),#-1 NO MATCH)),before(%1,-),after(%1,-)))] [min(max(before(%1,-),after(%1,-),1),words(setdiff(lattr([v([r(1)]_history)]/hist_time_*),#-1 NO MATCH)))])][center(- history listing for [r(1)] <Recalling lines [first(r(7))] to [rest(r(7))]...> -,78,-)])][setq(6,v([r(1)]_HISTORY))][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(ifelse(not(%3),revwords(u(do_histlineextr,%1)),u(do_histlineextr,%1)),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DO_HISTLINE ChanFunc=[timefmt(%[$02M/$02D/$Y $02h:$02T:$02S%],first(%0))] [ljust(ifelse(controls(%#,rest(%0)),<[ljust(rest(%0),6)]>),9)] [r(9)]
&DO_HISTLINECNT ChanFunc=[extract([lnum(max(%0,0),0)] [lnum(max(%1,0),0)],1,%2)]
&DO_HISTLINEEXTR ChanFunc=[extract([lnum(max(0,sub(get([r(6)]/cval),1)),0)] [lnum(words(setdiff(lattr([r(6)]/hist_data_##),#-1 NO MATCH)),sub(get([r(6)]/cval),1))],max(1,first(r(7))),add(1,sub(rest(r(7)),first(r(7)))))]
&COMCFGMSG_9 ChanFunc=[ifelse(and(setr(3,match(get([V(STOR-DB)]/ch_list),before(rest(%0),=))),setr(4,words(after(%0,=)))),ComSys: Channel '[secure(capstr(lcstr(before(rest(%0),=))))]' history-size set to [min(350,max(0,after(%0,=)))].,ComSys: Invalid arguments given with [first(secure(%0))] switches. [switch([r(3)][r(4)][gt(pos(=,%0),0)],*0,<Must use an equals>,0*,<Channel does not exist>,?0?,<No history size value given>)][setq(1,0)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),9,1,|)])]
&COMCFGDO9 ChanFunc=[u([v(FX-DB)]/do_chanhistset,rest(before(secure(%0),=)),min(350,max(0,after(secure(%0),=))))]
&F_CHK_CEMIT ChanFunc=[setq(1,grab(get([v(STOR-DB)]/ch_list),%0*))][setq(8,setinter(lwho(),get([v(STOR-DB)]/CHLIST_[r(1)])))][switch([setr(2,[gt(words(r(1)),0)][and(uldefault([r(1)]_lock,1,%#),1)][or(uldefault([r(1)]_cemit_lock,0,%#),[gte(bittype(%#),5)])])],0*,ComSys: Sorry\, that channel does not exist.,?0*,ComSys: Sorry\, You have no access to that channel.,*0,ComSys: Sorry\, You do not have permission to do that.)]
&F_DO_CEMIT ChanFunc=[setq(0,1)][u(format_chan,%2)] [setr(7,[objeval(%2,s(%1))])]
&COMCFGMSG_10 ChanFunc=[ifelse(and(match(get([V(STOR-DB)]/ch_list),rest(before(%0,=))),pos(=,rest(%0))),ComSys: CemitLock [ifelse(words(after(%0,=)),set,cleared)] for channel [capstr(lcstr(rest(before(%0,=))))],ComSys: Invalid arguments given with [first(secure(%0))] switch.%r[space(8)]Syntax: [extract(v(comcfgsyntax),1,1,|)][setq(1,0)])]
&COMCFGDO10 ChanFunc=[u([v(FX-DB)]/do_cemitlock,rest(before(%0,=)),after(%0,=))]
&COMCFGMSG_11 ChanFunc=[ifelse(and(isdbref(setr(3,pfind(rest(before(%0,=))))),words(setr(4,setdiff(setinter(lcstr(trim(after(%0,=))),get([V(STOR-DB)]/ch_list)),get([r(3)]/_ch_lock))))),ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] blocked from [elist(r(4))].,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([isdbref(r(3))][words(r(4))][gt(words(setinter(lcstr(after(%0,=)),get([r(3)]/_ch_lock))),0)],0*,<Invalid target>,?00,<Invalid channel%(s%) specified>,?01,<Target already omitted from channel%(s%)>)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),11,1,|)][setq(1,0)])]
&COMCFGDO11 ChanFunc=[u([v(FX-DB)]/do_plrlock,rest(before(%0,=)),setinter(lcstr(after(%0,=)),get([V(STOR-DB)]/ch_list)),1)]
&COMCFGDO12 ChanFunc=[u([v(FX-DB)]/do_plrlock,rest(before(%0,=)),after(%0,=),0)]
&COMCFGMSG_12 ChanFunc=[ifelse(and(isdbref(setr(3,pfind(rest(before(%0,=))))),words(setr(4,setinter(lcstr(trim(after(%0,=))),get([r(3)]/_ch_lock))))),ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] restored access to [elist(r(4))].,ComSys: Invalid arguments given with [first(secure(%0))] switch. [switch([isdbref(r(3))][words(r(4))],0*,<Invalid target>,?0,<Player not locked from channel%(s%) specified>)]%r[space(8)]Syntax: [extract(v(comcfgsyntax),12,1,|)][setq(1,0)])]
&COMCFGMSG_13 ChanFunc=[ifelse(or(isdbref(setr(3,pfind(rest(%0)))),not(words(rest(%0)))),u(dolistplrs_[isdbref(r(3))]),ComSys: Invalid arguments given with [first(secure(%0))] switch. <Invalid optional target specified>%r[space(8)]Syntax: [extract(v(comcfgsyntax),13,1,|)])][setq(1,0)]
&COMCFGMSG_14 ChanFunc=[ifelse(neq(words(rest(%0)),2),ComSys: Invalid arguments given with [first(secure(%0))] switch. <Requires left and right borders>%r[space(8)]Syntax: [extract(v(comcfgsyntax),14,1,|)][setq(1,0)],ComSys: Border set to be: [objeval(%#,s(first(rest(%0))))]CHANNEL-NAME[objeval(%#,s(rest(rest(%0))))])]
&COMCFGMSG_15 ChanFunc=[switch([or(not(words(rest(%0))),match(rest(%0),list))][and(match(get([v(STOR-DB)]/ch_list),first(before(rest(%0),=))),match(object all,[first(after(rest(%0),=))]*))],10,[u([v(FX-DB)]/do_genpemit,%#,ComSys: Listing Channels:%r[ljust(Channel,34)][ljust(Players,10)][ljust(Objects,10)]Invalid)][list(get([v(STOR-DB)]/ch_list),[ljust(u(do_chancolor_##,%#),34)][rjust(words(keeptype(get([v(STOR-DB)]/chlist_##),player)),7)][space(3)][rjust(words(keeptype(get([v(STOR-DB)]/chlist_##),thing)),7)][space(3)][localize(rjust(ifelse(gt(setr(9,words(remtype(get([V(STOR-DB)]/chlist_##),player thing))),0),ansi(hr,r(9)),0),7))])]Listing Completed.[setq(1,0)],01,ComSys: Purging [ifelse(match(all,[first(after(%0,=))]*),all non-players,all non-players/non-objects)] from channel [u(do_chancolor_[first(before(rest(%0),=))])],ComSys: Invalid argument(s) for [extract(v(comcfgswitches),15,1)] switch%r[space(8)]Syntax: [extract(v(comcfgsyntax),15,1,|)][setq(1,0)])]
&COMCFGMSG_16 ChanFunc=[ifelse(match(get([v(STOR-DB)]/ch_list),rest(%0)),ifelse(match(get([v(STOR-DB)]/commask_chanlist),rest(%0)),ComSys: Channel already added to alias mask list.[setq(1,0)],ComSys: Channel '[u(DO_CHANCOLOR,rest(%0))]' allowed to have alias masks.),ComSys: Channel does not exist.%r[space(8)]Syntax: [extract(v(comcfgsyntax),15,1,|)][setq(1,0)])]
&COMCFGMSG_17 ChanFunc=[ifelse(and(words(rest(%0)),match(get([v(STOR-DB)]/commask_chanlist),rest(%0))),ComSys: Channel '[u(DO_CHANCOLOR,rest(%0))]' removed from mask alias list.,[ifelse(words(rest(%0)),ComSys: Channel has not been added to mask alias list.[setq(1,0)],ComSys: Invalid channel specified.%r[space(8)]Syntax: [extract(v(comcfgsyntax),16,1,|)])][setq(1,0)])]
&COMCFGMSG_18 ChanFunc=[ifelse(and(words(rest(%0)),between(0,1,rest(%0),1)),ComSys: Comsystem aliases will [ifelse(rest(%0),no longer,now)] evaluate,ComSys: [ifelse(words(rest(%0)),Invaliad argument.  Choose '0' for parsing or '1' for non-parsing.,Current setting is [ifelse(get(#[config(global_error_obj)]/vd),non-parsing,parsing)].)][setq(1,0)])]
&COMCFGMSG_19 ChanFunc=[switch([match(rest(%0),list)][!!member(+ -,mid(rest(%0),0,1))][!!match([get([v(STOR-DB)]/ch_list)] 0,delete(rest(%0),0,1))][!or(and(member(+,mid(rest(%0),0,1)),match(get([v(F-DB)]/notify_list),delete(rest(%0),0,1))),and(member(-,mid(rest(%0),0,1)),!match(get([v(F-DB)]/notify_list),delete(rest(%0),0,1))))],1*,ComSys: Channels being notified (0 means NO notifications): [default([v(F-DB)]/notify_list,**ALL CHANNELS**)][setq(1,0)],?0*,ComSys: Must specify '+' or '-' to add or remove channel from %(dis%)connect notification.[setq(1,0)],??0?,ComSys: Invalid channel specified [delete(rest(%0),0,1)].[setq(1,0)],???0,ComSys: Channel has already been [ifelse(member(+,mid(rest(%0),0,1)),added,removed)] from notification.[setq(1,0)],ComSys: Channel [delete(rest(%0),0,1)] has been [ifelse(member(+,mid(rest(%0),0,1)),added,removed)] from %(dis%)connect notifications.)]
&COMCFGDO19 ChanFunc=[u([v(FX-DB)]/do_notifybyname,mid(rest(%0),0,1),delete(rest(%0),0,1))]
&COMCFGDO14 ChanFunc=[u([v(FX-DB)]/do_chanborders,rest(%0),%#)]
&COMCFGDO15 ChanFunc=[u([v(FX-DB)]/do_prunechan,trim(after(%0,=)),trim(rest(before(%0,=))),%#)]
&COMCFGDO16 ChanFunc=[u([v(FX-DB)]/do_chanmask,add,rest(%0),%#)]
&COMCFGDO17 ChanFunc=[u([v(FX-DB)]/do_chanmask,del,rest(%0),%#)]
&COMCFGDO18 ChanFunc=[u([v(FX-DB)]/do_toggleparse,rest(%0))]
&DOLISTPLRS_1 ChanFunc=ComSys: [capstr(lcstr(type(r(3))))] [name(r(3))] [ifelse(words(get([r(3)]/_ch_lock)),locked from channels: [elist(get([r(3)]/_ch_lock))],is not locked from any channels.)]
&DOLISTPLRS_0 ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,ComSys: Listing all players with locks%r[repeat(-,78)]%r[ljust(Type,5)][ljust(Target,35)]Channels%r[repeat(-,78)])][setq(0,search(eval=hasattr\(##\,_ch_lock\)))][ifelse(words(r(0)),list(r(0),[u(doplrlistclr_[mid(type(##),0,1)])][ljc(name(##),35)][get(##/_ch_lock)]),[center(%(No Players Found%),78)]%r)][repeat(-,78)]
&DOPLRLISTCLR_R ChanFunc=[ansi(hr,R)][space(4)]
&DOPLRLISTCLR_T ChanFunc=[ansi(hb,T)][space(4)]
&DOPLRLISTCLR_E ChanFunc=[ansi(hg,E)][space(4)]
&DOPLRLISTCLR_P ChanFunc=[ansi(hy,P)][space(4)]
&CBOOTF ChanFunc=[gte(bittype(%2),5)][and(match(get([V(STOR-DB)]/ch_list),%1),isdbref(pfind(%0)))]
&CBOOTMSG00 ChanFunc=ComSys: You don't have access to @cboot.
&CBOOTMSG01 ChanFunc=[u(cbootmsg00,%0,%1,%2)]
&CBOOTMSG10 ChanFunc=[ifelse(isdbref(pfind(%0)),ComSys: The target channel does not exist.,ComSys: The target specified is not valid.)]
&CBOOTMSG11 ChanFunc=ComSys: [capstr(lcstr(type(pfind(%0))))] [name(pfind(%0))] has been booted from [u([v(F-DB)]/do_chancolor_%1)].
&DOCBOOT ChanFunc=[u([v(FX-DB)]/do_cboot,%0,%1,%2)]
&VERSION ChanFunc=1.0.9c 03/09/2015
&COMHELP_SYNTAX ChanFunc=comhelp|addcom <alias>=<channel>|=<channel> <message>|.<channel> <message>|<alias> <message>|<alias> on|<alias> off|<alias> who|<alias> last[<value>]|delcom <channel>|@clist[/full /alias /notify /borders]|comlist|comtitle <channel>=<title>|comcfg[/<switch>]|@cemit <channel>=<message>|@cboot <target>=<channel>|commask <channel>=<alias>|comprefix[/clear] [<character(s)>]|comoptions|pennoptions|comall|comgag[/on /off /list] <channel>|comnotify[/enable /disable /on /off /list]
&COMHELP_REFERENCE ChanFunc=Show this screen.|Adds aliases to channel.|Method to talk on channel.|no-eval talk on channel.|Method to talk on channel.|Join a channel.|Leave a channel.|See who's on channel.|List channel history.|Remove alias (doesn't leave)|Lists available channels.|Lists connected channels.|Set channel comtitle.|Config comsys (see /help)|Emit over channel.|Boot target from channel.|Set name alias.|Config personal prefixes.|List speaking options.|PennMUSH syntax help.|List all users on chans.|Turn gagging on/off/list.|Notification Broadcasts
&COMOPTIONS_SYNTAX ChanFunc=<alias>:<message>|<alias>;<message>|<alias>"<message>|<alias>`<player> <message>|<alias>`<player(s)>` <message>
&COMOPTIONS_REFERENCE ChanFunc=Pose a message.|Possessive-Pose a message.|Say a message (default).|Com-to a specified person.|Com-to multiple people.
&PENNOPTIONS_SYNTAX ChanFunc=+<chan> [:;"]message|@chan[nel]/who <chan>|@chan[nel]/on <chan>[=<user>]|@chan[nel]/off <chan>[=<user>]|@chan[nel]/list|@chan[nel]/what|@chan[nel]/title <chan>=<title>|@chan[nel]/recall <chan>[=<range>]
&PENNOPTIONS_REFERENCE ChanFunc=Pose/Possessivepose/Say a message.|See who's on channel.|[force someone to]Join a channel.|[force someone to]Leave a channel.|List channels.|List channel descriptions.|Set title for channel.|Show history for channel.
&DOLAST_BACKUP ChanFunc=[u([v(FX-DB)]/do_pemit,[setq(7,min(get([v([r(1)]_history)]/hval),max(min(ifelse(words(%1),%1,10),setr(0,words(setdiff(lattr([v([r(1)]_HISTORY)]/hist_time_*),#-1 NO MATCH)))),min(%1,r(0)),1)))][center(- history listing for [r(1)] <Recalling [r(7)] lines...> -,78,-)])][ifelse(words(setdiff(lattr([v([r(1)]_history)]/hist_*),#-1 NO MATCH)),list(u(do_histlinecnt,max(sub(get([setr(6,v([r(1)]_HISTORY))]/cval),1),0),get([r(6)]/hval),r(7)),[setq(9,get([r(6)]/hist_data_##))][u(do_histline,get([r(6)]/hist_time_##))]),[center(** No History Available **,78)]%r)][repeat(-,78)]
&DO_COMALL ChanFunc=[u([v(FX-DB)]/do_genpemit,%#,Listing all channels and players on channels:%r[repeat(-,78)])][list(get([v(STOR-DB)]/ch_list),[u(do_chancolor,itext(0))]%r[space(5)][wrap(elist(iter(get([v(STOR-DB)]/chlist_[itext(0)]),name(itext(0)),,#),,#),69,l,,,5)])][repeat(-,78)]
@set ChanFunc=INHERIT
@set ChanFunc=HALTED
@@
@@ Create ComSystem SIDEFX Object
@@
@create ComSysSIDEFX=10
&DO_TOGGLEPARSE ComSysSIDEFX=[set(#[config(global_error_obj)],VD:[add(%0,0)])]
&DO_CHANMASK ComSysSIDEFX=[ifelse(match(%0,add),set(v(STOR-DB),COMMASK_CHANLIST:[setunion(get([v(STOR-DB)]/COMMASK_CHANLIST),lcstr(%1))]),set(v(STOR-DB),COMMASK_CHANLIST:[setdiff(get([v(STOR-DB)]/COMMASK_CHANLIST),lcstr(%1))]))]
&DO_ALIAS ComSysSIDEFX=[u(do_alias_[and(uldefault([v(F-DB)]/[after(%2,:)]_lock,1,%#),not(match(get(%#/_ch_lock),after(%2,:))))],%0,%1,%2,%3,%4,%5,%6,%7,%8,%9)]
&DO_ALIAS_0 ComSysSIDEFX=ComSys: Sorry, you have no access to that channel.
&DO_ALIAS_1 ComSysSIDEFX=[setq(9,v(1))][setq(1,after(%2,:))][setq(3,default([v(F-DB)]/ch_template1_%q1,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%q1,get([v(F-DB)]/ch_template2)))][setq(5,u([v(F-DB)]/genericdo[setr(6,member(get([v(F-DB)]/generic_cmds),mid(r(9),0,1)))],%0,r(9),%#))][ifelse(match(get(%#/_ch_gagged),r(1)),pemit(%#,ComSys: NOTICE -- You are currently gagged on [u([v(F-DB)]/do_chancolor,r(1))]))][npemit(ifelse(or(and(match(on off who,first(%1)),eq(1,words(%1))),and(lt(words(%1),3),match(last,first(%1)))),%#,u([v(FX-DB)]/do_gagging,r(1))),r(5))][u([v(FX-DB)]/do_chcnt,r(1))][ulocal([v(FX-DB)]/do_hist[r(0)],secs())]
&DO_JOINCHAN ComSysSIDEFX=[ifelse(%1,set([V(STOR-DB)],CHLIST_%2:[setunion(get([V(STOR-DB)]/CHLIST_%2),%#)]),set([V(STOR-DB)],CHLIST_%2:[setdiff(get([V(STOR-DB)]/CHLIST_%2),%#)]))]
&DO_CHKALIAS ComSysSIDEFX=[ifelse(ulocal(dochk,%0,%1,%2,%3,%#),u(do_alias,%0,%1,%2,%3,%4),ComSys: [switch(%1,on,You are already on that channel,off,You are already off that channel,Sorry%, you are not on that channel.)])]
&DOCHK ComSysSIDEFX=[or(and(not(member(on,lcstr(%1))),setr(5,match(get([V(STOR-DB)]/chlist_[after(%2,:)]),%#))),and(member(on,lcstr(%1)),not(r(5))))]
&DO_CHCNT ComSysSIDEFX=[ifelse(words(%0),set([V(STOR-DB)],chused_%0:[add(get([V(STOR-DB)]/chused_%0),1)]))]
&DO_CHANLOCK ComSysSIDEFX=[set([v(F-DB)],%0_lock:%1)]
&DO_CHANCREATE ComSysSIDEFX=[set([V(STOR-DB)],ch_list:[setunion(lcstr(get([V(STOR-DB)]/ch_list)),lcstr(%0))])][set([V(STOR-DB)],chdesc_%0:%1)][set([v(F-DB)],do_chancolor_%0:[capstr(lcstr(%0))])]
&DO_CHANDELETE ComSysSIDEFX=[set([V(STOR-DB)],ch_list:[setdiff(lcstr(get([V(STOR-DB)]/ch_list)),lcstr(%0))])][set([V(STOR-DB)],chdesc_%0:)][set([v(F-DB)],do_chancolor_%0:)][set([V(STOR-DB)],chlist_%0:)]
&DO_CHANCOLOR ComSysSIDEFX=[set([v(F-DB)],do_chancolor_%0:%1)]
&DO_CHANREDESC ComSysSIDEFX=[set([V(STOR-DB)],chdesc_%0:%1)]
&DO_HIST1 ComSysSIDEFX=[setq(9,get([setr(8,get([v(F-DB)]/[r(1)]_history))]/hval))][set(r(8),HIST_TIME_[setr(5,mod(get([r(8)]/CVAL),get([r(8)]/HVAL)))]:%0 %#)][set(r(8),HIST_DATA_[r(5)]:[r(7)])][set(r(8),CVAL:[mod(add(1,get([r(8)]/CVAL)),get([r(8)]/HVAL))])]
&DO_PEMIT ComSysSIDEFX=[npemit(%#,edit(%0,r(1),[u([v(F-DB)]/do_chancolor_[r(1)])]))]
&DO_CHANHISTSET ComSysSIDEFX=[ifelse(words(setr(3,get([v(F-DB)]/%0_history))),,[setr(4,create([capstr(lcstr(%0))]LOG,10))][tel(r(4),[v(CH-DB)])][set([v(F-DB)],%0_history:[r(4)])][setq(3,r(4))])][set(r(3),HVAL:%1)]
&DO_CEMITLOCK ComSysSIDEFX=[set([v(F-DB)],%0_cemit_lock:%1)]
&DO_PLRLOCK ComSysSIDEFX=[ifelse(%2,set(pfind(%0),_ch_lock:[setunion(get([pfind(%0)]/_ch_lock),lcstr(%1))]),set(pfind(%0),_ch_lock:[setdiff(get([pfind(%0)]/_ch_lock),lcstr(%1))]))]
&DO_GENPEMIT ComSysSIDEFX=[npemit(%0,%1)]
&DO_CBOOT ComSysSIDEFX=[u([v(FX-DB)]/do_alias,xxx,:has @cbooted [name(pfind(%0))] off the channel,xxx:%1)][set([V(STOR-DB)],chlist_%1:[setdiff(get([V(STOR-DB)]/chlist_%1),pfind(%0))])]
&DO_CHANBORDERS ComSysSIDEFX=[set([v(F-DB)],ch_template1[ifelse(match(get([v(STOR-DB)]/CH_LIST),%2),_%2)]:[objeval(%1,s(first(%0)))])][set([v(F-DB)],ch_template2[ifelse(match(get([v(STOR-DB)]/CH_LIST),%2),_%2)]:[objeval(%1,s(first(rest(%0))))])]
&DO_PRUNECHAN ComSysSIDEFX=[ifelse(match(%0,o*),set(v(STOR-DB),CHLIST_%1:[keeptype(get([v(STOR-DB)]/CHLIST_%1),player thing)]),set(v(STOR-DB),CHLIST_%1:[keeptype(get([v(STOR-DB)]/CHLIST_%1),player)]))]
&DO_GAGGING ComSysSIDEFX=[iter(get([v(STOR-DB)]/CHLIST_%0),ifelse(or(and(match(%qn,snuffit),or(match(get(##/_ch_unnotify),%0),match(get(##/_ch_unnotify),+all))),match(get(##/_ch_gagged),%0)),,%i0))]
&FN_GAGSET ComSysSIDEFX=[ifelse(match(%1,remove),set(%0,_CH_GAGGED:[setdiff(get(%0/_ch_gagged),lcstr(%2))]),set(%0,_CH_GAGGED:[setunion(get(%0/_ch_gagged),lcstr(%2))]))]
&FN_NOTIFYSET ComSysSIDEFX=[switch(%1,remove,set(%0,_CH_NOTIFY:[setunion(get(%0/_ch_notify),lcstr(%2))]),add,set(%0,_CH_NOTIFY:[setdiff(get(%0/_ch_notify),lcstr(%2))]),clear,set(%0,_CH_NOTIFY:),all,set(%0,_CH_NOTIFY:+all))]
&FN_NOTIFYUNSET ComSysSIDEFX=[switch(%1,remove,set(%0,_CH_UNNOTIFY:[setunion(get(%0/_ch_unnotify),lcstr(%2))]),add,set(%0,_CH_UNNOTIFY:[setdiff(get(%0/_ch_unnotify),lcstr(%2))]),clear,set(%0,_CH_UNNOTIFY:),all,set(%0,_CH_UNNOTIFY:+all))]
&FN_COMNOTIFYBROADCAST ComSysSIDEFX=[setq(n,snuffit)][nsiter(setdiff(default([v(F-DB)]/notify_list,get([v(STOR-DB)]/CH_LIST)),0),ifelse(and(match(get([v(STOR-DB)]/CHLIST_##),%0),!or(match(get(%0/_ch_notify),##),match(get(%0/_ch_notify),+all))),u([v(FX-DB)]/do_alias_notify,%0,%k %1,##)))]
&DO_ALIAS_NOTIFY ComSysSIDEFX=[setq(n,snuffit)][setq(3,default([v(F-DB)]/ch_template1_%2,get([v(F-DB)]/ch_template1)))][setq(4,default([v(F-DB)]/ch_template2_%2,get([v(F-DB)]/ch_template2)))][setq(1,%2)][setq(g,u([v(F-DB)]/f_do_cemit,%2,%1,%0))][setq(f,u([v(FX-DB)]/do_gagging,%2))][ulocal([v(FX-DB)]/do_hist1,secs())][pemit(%qf,%qg)]
&DO_NOTIFYBYNAME ComSysSIDEFX=[ifelse(match(%0,+),set([v(F-DB)],NOTIFY_LIST:[setunion(get([v(F-DB)]/notify_list),%1)]),set([v(F-DB)],NOTIFY_LIST:[setdiff(get([v(F-DB)]/notify_list),%1)]))]
@set ComSysSIDEFX=INHERIT
@set ComSysSIDEFX=SIDEFX
@@
@@ Last Minute Configuration.
@@
@swi/f [gte(bittype(%#),6)]=1,{@swi/f [config(global_error_obj)]=-1,{@pemit %#=Defining global error object.  Please insert the line 'global_error_obj [strip(num(globalerrobject),#)]' in your .conf file;@admin global_error_obj=[strip(num(globalerrobject),#)]},{@pemit %#=Global error object already defined as #[config(global_error_obj)].  Please add functionality from [num(globalerrobject)] to it.},@pemit %#=You must have an immortal/#1 set up global_error_obj to [num(glboalerrobject)]}
@fo me=&CH-DB GlobalErrObject=[num(ChanSys)]
@fo me=&CH-DB ChanFunc=[num(ChanSys)]
@fo me=&CH-DB ComSysSIDEFX=[num(ChanSys)]
@fo me=&F-DB GlobalErrObject=[num(ChanFunc)]
@fo me=&F-DB ChanFunc=[num(ChanFunc)]
@fo me=&F-DB ComSysSIDEFX=[num(ChanFunc)]
@fo me=&STOR-DB GlobalErrObject=[num(ChannelDB)]
@fo me=&STOR-DB ChanFunc=[num(ChannelDB)]
@fo me=&STOR-DB ComSysSIDEFX=[num(ChannelDB)]
@fo me=&FX-DB GlobalErrObject=[num(ComSysSIDEFX)]
@fo me=&FX-DB ChanFunc=[num(ComSysSIDEFX)]
@fo me=&FX-DB ComSysSIDEFX=[num(ComSysSIDEFX)]
@@
@@ Ok, clean up the objects.
@@
@@ Define global error object
@tel/list GlobalErrObject ChanFunc ComSysSIDEFX ChannelDB=ChanSys
@@ Set command flag if needed
@@
@pemit %#=This may give an error if the COMMAND flag is not defined.  Ignore the error.
@set ChanSys=command
@@ 
@pemit %#=Creating default channels.
comcfg/chanadd Newbie=New Player Channel
comcfg/chancolor newbie=[ansi(h,Newbie)]
comcfg/chanadd Public=New Player Channel
comcfg/chancolor public=[ansi(hb,Public)]
@swi/f [isdbref(globalroom())]=1,{@pemit %#=Installing into your globalroom %([name(globalroom())]%([globalroom()][flags(globalroom())]%);@tel/quiet ChanSys=globalroom();@pemit %#=Installation Completed. (type 'comhelp' for help)},{@pemit %#=Either the global room isn't configured or you have no access to it.  You will need to manually place the object into the global room.%rInstallation Completed. (type 'comhelp' for help)}
